syntax = "proto3";
package limit.event;

import "auth.proto";
import "event.types.proto";

message Event {
    // uuid of the event
    // better uuid v7 for sql better performance
    // could only be empty for sender
    string event_id = 1;
    // sent time of the event
    int64 timestamp = 2;
    // sender uuid of the event
    string sender = 3;
    // event data
    oneof detail {
        limit.event.types.Message message = 4;
    }
}

message ReceiveEventsRequest {
    // auth
    limit.auth.Auth token = 1;
}

message SendEventRequest {
    // auth
    limit.auth.Auth token = 1;
    // event
    Event event = 2;
}

message SendEventResponse {
    // event id
    string event_id = 1;
}

message SynchronizeRequest {
    // auth
    limit.auth.Auth token = 1;
    // target subscriber
    string subscription = 2;
    oneof starting_point {
        // synchronization start timestamp
        // the default is now
        int64 timestamp = 3;
        // the ID of the event to start synchronization
        string event_id = 4;
    }
    // offset for synchronization
    // the default is +50 (49 events backwards from the starting point)
    sint32 offset = 5;
    // returns all type of events if not specified
    limit.event.types.Types filter = 6;
}

message SynchronizeResponse {
    repeated limit.event.Event events = 1;
}

service EventService {
    // receiving all events from the server
    rpc ReceiveEvents (ReceiveEventsRequest) returns (stream Event);
    // sending event to the server
    rpc SendEvent (SendEventRequest) returns (SendEventResponse);
    // synchronize from server
    rpc Synchronize(SynchronizeRequest) returns (SynchronizeResponse);
}
